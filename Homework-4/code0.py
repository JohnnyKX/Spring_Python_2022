# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14owvCf3AcjZT3Th5uz_fkbDz8aOU24Yy
"""

#O(N)
class Solution:
    def twoSum(self, nums, target) -> List[int]:
        d = {}
        for i in range(len(nums)):
            n = target - nums[i]
            if n in d:
                return i, d[n]
            else:
                d[nums[i]] = i

#O(N^2)
class Solution:
    def twoSum(self, nums, target) -> List[int]:
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                if nums[i] + nums[j] == target:
                    return [i, j]

#O(NlogN)

class Solution(object):
    def twoSum(self, numbers, target):
        nums = []
        for i in range(len(numbers)):
            nums.append(numbers[i])
            
        numbers.sort()  


        for i in range(len(numbers)):
            m = 0
            a = 0
            b = len(numbers)
            f = 0
            c = target - numbers[i]
            
            while (a <= b):
                m = (a + b) // 2
                if c < numbers[m]:
                    b = m - 1
                if c >= numbers[m]:
                    a = m + 1
                if (c == numbers[m]) and (m != i):
                    j = m
                    f = -2
                    break
                if m >= len(numbers) - 1:
                    f = -1
                    break

            if f == -2:
                a = numbers[i]
                b = numbers[j]
                break
                
        c = nums.index(a)
        nums = nums[::-1]
        d = len(nums) - nums.index(b) - 1
        if c > d:
            return(d, c)
        if c < d:
            return(c, d)

